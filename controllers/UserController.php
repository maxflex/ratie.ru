<?php	// Контроллер пользователей	class UserController extends Controller	{		public $defaultAction = "UserPage";				// Папка вьюх		protected $_viewsFolder	= "user";				// Отображение страницы пользователя		public function actionUserPage()		{				// Получаем пользователя			$User = User::findByLogin($_GET["user"]);									// Сохраняем ID пользователя, страница которого просматривается, в сессию			$_SESSION["viewing_id"] = $User->id;						// Своя страница?			$own_page = User::fromSession(false)->id == $User->id;						// Если просматривается НЕ своя страница			if (!$own_page) {					}						/******* CТРАНИЦА КОММЕНТАРИЕВ ********/						if (isset($_GET["comment"])) {				addJs("user_comments"); // Включаем JS								// Получаем ID прилагательного				$id_adjective = (int)$_GET["comment"];								// Находим комментируемое прилагательное				$Adjective = Adjective::findById($id_adjective);								// Получаем комментарии				$Comments = $Adjective->getComments();								// Если пользователь залогинен				if (User::loggedIn() && !User::fromSession(false)->anonymous) {					// Получаем залогиненного пользователя					$LoggedUser = User::fromSession();										// Проверяем подписан ли залогиненынй пользователь на пользователя, чья страница просматривается					$subscribed = $LoggedUser->subscribedTo($User->id);										// Пользователь, который будет передаваться на страницу рендера					$PassUser = (object)[						"id"	  => $LoggedUser->id,						"login"	  => $LoggedUser->login,						"avatar"  => $LoggedUser->avatar,						"stretch" => $LoggedUser->stretch,					];				} else {					$PassUser = (object)[						"id"	  => 0,						"login"	  => "",						"avatar"  => "img/profile/noava.png",						"stretch" => false,					];									}								$this->render("comments", array(					"own_page"		=> $own_page,					"User"			=> $User,					"LoggedUser"	=> $PassUser,					"Adjective"		=> $Adjective,					"Comments"		=> $Comments,					"subscribed"	=> $subscribed,					"id_adjective"	=> $id_adjective,				));			} else {						/******* CТРАНИЦА ПОЛЬЗОВАТЕЛЯ ********/							addJs("fancyInput, user");	// Включаем JS				addCss("fancyInput");		// Включаем CSS								// Получаем случайное прилагательное в placeholder							$default_adjective = DefaultAdjective::randomAdjective($User->gender);								// Если просматривает сам себя				if ($own_page) {					// Подключаем сторонний JS					addJs("//vk.com/js/api/openapi.js", true);										// Подключаем дополнительный JS					addJs("user_own");										// Если пользователю еще не было предложено подписаться на друзей из ВК					if (!$User->intro["friends"]) {						// Добавлеям JS просмотра друзей						addJs("friends");												// Показать окно друзей на Ratie						$show_friends = true;												// Пользователю уже были предложены друзья из ВК, больше не отображать						$User->intro["friends"] = true;						$User->save();					}										// То отображаем все прилагательные					$Adjectives = Adjective::findAll();										// Подсчитываем кол-во скрытых прилагательных					$hidden_count = Adjective::findAll(array(						"condition"	=> "hidden=1"					), true); 				} else {					// Иначе не отображаем скрытые					$Adjectives = Adjective::findAll(array(						"condition" => "hidden=0"					));										// Если пользователь залогинен, то проверяем подписан ли залогиненынй пользователь на пользователя, чья страница просматривается					if (User::loggedIn()) {						$subscribed = User::fromSession()->subscribedTo($User->id);					}				}									$this->render("userpage", array(					"User"				=> $User,					"Adjectives"		=> $Adjectives,					"hidden_count"		=> $hidden_count,					"own_page"			=> $own_page,					"default_adjective"	=> $default_adjective,					"subscribed"		=> $subscribed,					"show_friends"		=> $show_friends,				));			}					}				// Точно тест		public function actionTest2()		{			$User = User::findById(1);						$Vote = new Vote(array(				"id_adjective"	=> 2,				"ip"			=> "192.168.0.1",			));						$this->render("test2", array(				"Vote" => $Vote,			));		}						// Функция для добавления мысли о человеке		public function actionAjaxAddThought()		{			// Инициализируем сессию для того, чтобы получить ID текущего пользователя, чья страница просматривается			$User = User::findById($_SESSION["viewing_id"]);						$Adjective = $User->addAdjective($_POST["adjective"], true);														}				// Функция голосования		public function actionAjaxVote()		{			// Инициализируем сессию для того, чтобы получить ID текущего пользователя, чья страница просматривается			$User = User::findById($_SESSION["viewing_id"]);						// Ищем прилагательное			$Adjective = Adjective::findById($_POST["id"]);						// Добавляем голос			$Adjective->addVote(true, $_POST["type"]);		}				// Скрываем прилагательное		public function actionAjaxHide()		{			// Получаем пользователя из сессии			$User = User::fromSession();						// Залогиненный юзер должен быть равен просматриваемому (иначе кто-то другой может будет послать запрос на HIDE прилагательного)			if ($_SESSION["viewing_id"] == $User->id) {				$Adjective = Adjective::findById($_POST["id"]);				$Adjective->hidden = !$Adjective->hidden;				$Adjective->save();			}		}				// Подписываемся		public function actionAjaxSubscribe()		{			// Получаем пользователя из сессии			$User = User::fromSession();			// Подписываемся на пользователя			$User->subscribeTo($_POST["id_user"]);		}				// Получаем список друзей		public function actionAjaxGetFriends()		{			// Массив с ID всех друзей из ВК			/*			foreach ($_POST["ids"] as $id_friend) {				echo $id_friend."\n";			}*/						$condition = implode(",", $_POST["ids"]);						// echo $condition;						$Friends = User::findAll(array(				"condition"	=> "id_vk in ($condition)"			));						// print_r($Friends);						echo json_encode($Friends);					}						// Оставляем комментарий		public function actionAjaxLeaveComment()		{			// Проверяем есть ли комментарий			if (!empty($_POST["comment"])) {				// Инициализируем сессию для того, чтобы получить ID текущего пользователя, чья страница просматривается				$User = User::findById($_SESSION["viewing_id"]);								// Получаем залогиненного пользователя				$LoggedUser = User::fromSession(false);								$Comment = new Comment(array(					"comment"		=> trim($_POST["comment"]),					"id_adjective"	=> (int)$_POST["id_adjective"],					"id_user"		=> ($LoggedUser->anonymous ? 0 : $LoggedUser->id),					"ip"			=> realIp(),					"time"			=> now(),				));								$Comment->save();								// Возвращаем ID нового комментария				echo $Comment->id;										// Добавляем новость, если это не комментарий самому себе				if ($LoggedUser->id != $User->id) {					Feed::create(array(						"id_adjective"	=> (int)$_POST["id_adjective"],						"id_user"		=> ($LoggedUser->anonymous ? 0 : $LoggedUser->id),						"id_news_type"	=> NewsType::COMMENT,					));					}								}		}	}